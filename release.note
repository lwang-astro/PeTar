**experiment update referring to master**

1. Include a parallel random number generator library and save the random seeds into a file for each snapshot with a filename suffix `.randseeds`. Use cpu time as the initial seed if not given manually.
2. Add copy and mathematical operators for the data analysis classes (e.g., `petar.Particle`) in the Python analysis tool.
3. Call the BSE evolve function at time zero in `petar.bse` to ensure spin initialization is not missed.
4. Implement support for including external perturbation forces during hard integration, adding a `--with-external-hard` option in the configure script.
5. Introduce gas drag with GDF force for external perturbation; support using Galpy potential as the gas potential; update petar.hard.debug to read external hard parameters and galpy parameters.
6. Add a function named `generateBSEInput` for the `petar.Binary` class in the analysis tool to convert `petar.Binary` data into a binary input file for `petar.bse`.
7. Include `semiToPeriod` and `periodToSemi` functions in the Python analysis tools.
8. Fix a bug in the Python analysis function `calcGWMyr`.
9. Resolve the assertion issue where `r_search = r_out` for an isolated binary system at the coordinate origin.
10. Modify the interrupt mode 'base': For the `petar` option `--detect-interrupt 2`, remove all quitting functions during hard drift when the interrupt condition is triggered. This was originally designed for the AMUSE stopping condition but does not work as expected. The revised method records parameters of interrupted binaries into an array that is accessible in the `petar` class after one tree step of integration, without quitting the drift during that tree step.
11. Add output density information for the `petar.galpy.test` tool.
12. Introduce `astro_units.hpp` to store the units used in PeTar instead of specifying units in individual source files.
13. Add `calcTrh` and `calcPsi` for multi-component relaxation time in the `petar.Lagrangian` class within the Python analysis tools.
14. Enhance the Python analysis tools to read SDAR snapshots, including hybrid mode.
15. Support using magnitudes generated by GalevNB for different filters as colors in `petar.movie`.
16. Fix the issue with point sizes being unable to be set small in `petar.movie`.
17. Update the binary pair ID set to include new and end groups in the Hermite integrator with the `ADJUST_GROUP_PRINT` flag.
18. Allow users to disable the tidal tensor method for groups by setting `--use-tidal-tensor 0` in the `petar` commander.
19. Support dumping a list of hard clusters for a specified ID range in `petar` using the new options `--record-id-**`.
20. Update the `petar.hard.debug` tool to support reading a dump file that contains a list of hard clusters.
21. Remove the unused `time_org` in Hermite information.
22. Add support for reading snapshot data in 128-bit floating-point format in the Python analysis tool.
23. Add calculation of sound speed depending on pressure for gas drag mode.
24. Fix error implementation for KDKDK-4th mode, use tree_nb to calculate gradient correction for only EP particles (no SIMD yet); Add gradient correction for external force from galpy; Still need to test whether changeover change for gradient correction is correctly implemented. Need to consider how to avoid double gredient calculation and simd/gpu version.
25. Fix wrong data type for scale_density in gas_drag mode
26. Add MergerTree class in Python analysis tool
27. Add mpreal support to store high-precision parts of particle positions, this can avoid influence of round-off on the tight binaries when the c.m. of system has significant jump.
28. Improve printTable function in Python analysis tool to support output in LaTex and CSV format.
29. Improve the -r option in petar.data.process, allow to continue the calculation when core/single/binary files are available.
30. Fix a bug in `data.py`: During the initialization of `petar.Binary` with `p1` and `p2` both being empty, the `pos` and `vel` members are incorrectly shaped as `(0,)` instead of `(0, 3)`.

**Some existing issues include**

2. In cases where a high-eccentric binary system transitions from a binary to a hyperbolic orbit temporarily due to significant perturbations at a large separation, the BSE code may incorrectly identify it as an immediate merger, even though the binary system does not actually merge. It is essential to establish a more precise criterion for invoking binary evolution codes in such scenarios.
3. Need better stability criterion
4. Need to check criterion of TT method for binaries
5. Need to check slowdown factor criterion
6. Need better group information output

**1255**

Updates: (version shown in ()):

1. (1238) Fix the warning message of the file closing in `petar.data.process`.  
2. (1238,1243) Allow the output time step to be an integer multiple of the tree time step instead of restricted to 0.5^{integer}. Fix a bug in version 1243 that when tree time step >1, output time step becomes zero.
3. (1239) Update the output information of the parameter list in the main output of petar for better clarity:  
   **Old Version:**  
   - mass_average =   
   - r_in         =   
   - r_out        =   
   - r_bin        =   
   - r_search_min =   
   - vel_disp     =   
   - dt_soft      =   

   **New Version:**  
   - Average mass                      =   
   - Mean inner changeover radius      =   
   - Mean outer changeover radius      =   
   - Mean SDAR group detection radius  =   
   - Minimum neighbor searching radius  =   
   - Velocity dispersion               =   
   - Tree time step                    =   
   - Output time step                  =   
4. (1241) Correct two incorrect binary type indices saved in the bpp array (*,10) of evolve2.f and in the binary type change file for BSE-based stellar evolution codes: (1) for a part of common envelope events, the binary type index 8 is incorrectly output as the END SYMB index 7 (evolve2.f:1410); (2) for a part of no remnant events, the type index 12 is incorrectly output as the DISRUPT index 13 (evolv2.f:2624). In addition, the isNoRemnant() function is implemented in bse_interface.h to identify no remnant events. In previous version, the no remnant is identified in isMerger() function.
5. (1241) Fix the conflicts of names for the executable files in configure script. When no parallel method is used and only one of the interrupt or external modes is activated, the test program for the interrupt method (e.g., petar.bse) or the external method (e.g., petar.galpy) conflicted with the main petar program name. The petar program name will now have the suffix: `noparallel` added to avoid conflicts.
6. (1242) For BSE based stellar evolution, call single stellar evolution for each star at time zero, and then, the data.0 snapshot will contain initial stellar evoution parameters. In the previous version, stellar evolution parameters of a star are initialized at the first time when SSE/BSE is called for this star.
7. (1244) In the data analysis function petar.BSEMerge, the previous version's combine function included fake merger events of binaries where one component underwent a supernova and became massless. The new version, however, only detects events in which one component becomes massless while the other component gains mass.
8. (1245) Add the missing binary event information (core mass, radius, core radius, luminosity, spin) into type_change files for MOBSE and BSEEMP. 
9. (1245) Save semi-major axis and eccentricity for kw=15 instead of setting them to zero in type_change files. 
10.(1245) Enhance the printTable function in the Python analysis tool to allow manual setting of column titles. Additionally, introduce pre-defined column_format options for petar.SSETypeChange, petar.BSETypeChange and petar.BSEMerge for user convenience.
11.(1245) To maintain consistency with other Python data analysis classes, such as `petar.BSETypeChange`, the members `kw1`, `kw2`, and `kwf` defined in `petar.BSEMerge` have been renamed to `type1`, `type2`, and `typef`, respectively.
12.(1246) Update c.m. calculation method: use past 16 records of c.m. positions and velocities and obtain the median values as an average to update c.m. This can avoid significant jump of c.m. position and large roundoff errors when the density is too low, such as tidal streams. Also fix a problem when only one particle exist, the c.m. calculation may not be correct using the potential weighted method, now use no weight method instead.
13.(1251) Partially fix the issue of correction for energy with stellar evolution (merged and modified from Tomomune Nishino).
14.(1255) Add support to auto detect Galpy when Python virtual envirnoment is used.
15.(1255) Add printing configure errors when Fortran compiler is not installed while BSE is switched on.

Some existing issues include:
1. When long-distant massive escapers exist and the stellar system has a very low density due to e.g. tidal disruption, the center position of global system based on the soft potential can suddenly jump to the escaper, which may generate large roundoff errors to binary orbits, that can cause artificial eccentricity jumps of binary systems. Need better way to determine the center of globaly system during simulation (partially solved, better to use mpreal in future).
2. In cases where a high-eccentric binary system transitions from a binary to a hyperbolic orbit temporarily due to significant perturbations at a large separation, the BSE code may incorrectly identify it as an immediate merger, even though the binary system does not actually merge. It is essential to establish a more precise criterion for invoking binary evolution codes in such scenarios.
3. Need better stability criterion
4. Need to check criterion of TT method for binaries
5. Need to check slowdown factor criterion
6. Need better group information output

**v1.0 Change Note**

The v1.0 release of PeTar marks the first stable version of Petar. A comparison with v1.0-beta reveals the following updates:

1. Enhanced the language of the README.md help documentation and included missing descriptions for all tools.
2. Improved the language of help information for petar and all tools, and added Doxygen documentation for developers.
3. Moved sample scripts for star cluster simulations to a new directory named "sample" and included a Jupyter Notebook, data_analysis.ipynb, as an example illustrating the data analysis module in Python.
4. Implemented the BSEEMP stellar evolution code for extremely metal-poor stars.
5. Introduced the petar.format.transfer.post tool.
6. Updated the Galpy interface to support time-dependent potentials and fixed several related bugs.
7. Adjusted Galpy default units to match PeTar units instead of the official Galpy Bovy unit.
8. Updated class methods in Python data analysis to support mathematical operations, set hosts, and save and load files in BINARY and npy formats.
9. Improved petar.data.process to enhance the calculation of tidal radius.
10. Introduced support for calculating Lagrangian radii in mass ranges using the 'add_mass_range' option in petar.data.process and petar.LagrangianMultiple.
11. Added support for custom functions in the petar.get.object.snap tool.
12. Added petar.SSEISO to read printed output from petar.bse code.
13. Eliminated the dependency on helper_cuda.h to support systems without CUDA SDK.
14. Implemented a change to generate random seeds based on MPI ranks to prevent the problem of repeated random seeds across different MPI processors.
15. Addressed bugs in MOBSE and Python tools. 

Some existing issues include:
1. In cases where a high-eccentric binary system transitions from a binary to a hyperbolic orbit temporarily due to significant perturbations at a large separation, the BSE code may incorrectly identify it as an immediate merger, even though the binary system does not actually merge. It is essential to establish a more precise criterion for invoking binary evolution codes in such scenarios.
2. Several issues from the v1.0-beta version of MOBSE remain unresolved.

**v1.0-beta**

The v1.0-beta release of PeTar is now ready for use. Some existing issues include:

1. Incomplete BSEEMP and MOBSE interface where certain parameters (luminosity, radius, core mass, spin) for binary stellar evolution event records are not correctly recorded when `base_output = False` for the Python analysis class `petar.BSEBinaryEvent`. The corresponding data file is `data.mobse.**`.
2. Potential bug when a member of a merger becomes type 15 in MOBSE and its mass is not set to zero, requiring further testing to ensure it does not occur.
3. Incomplete galpy interface with confusing unit conversion and difficulties in handling it. The time-dependent potential following the cluster center is not accurately calculated in the current version. In the next release update, the default unit of Galpy will align with that of PeTar without additional unit conversion. Improved support for time-dependent potential with a better galpy configure file format will be implemented.
4. Issue with the random generator for all BSE versions when parallelization is used, designed originally for a single processor. The problem arises from each MPI processor having the same seeds, leading to repeated random numbers and causing the issue of identical kick velocities after supernovae. In the next release update, the parallel C++ version of the random generator will replace the Fortran ran3 from BSE codes.

