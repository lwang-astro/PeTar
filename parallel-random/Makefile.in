TARGET:	librand.a librandnomp.a test_randc test_randcnomp

FC=@FC@
CXX=@CXX@
use_mpi =@use_mpi@
use_omp = @use_omp@

CXXFLAGS += @CXXFLAGS@ @OPTFLAGS@ 
FFLAGS += @FCFLAGS@
FCLIBS = @FCLIBS@

ifeq ($(use_mpi),yes) 
CXXFLAGS += -DPARTICLE_SIMULATOR_MPI_PARALLEL
endif # mpi

OMPFLAGS = 
ifeq ($(use_omp),yes)
OMPFLAGS += @OPENMP_CXXFLAGS@
OMPFLAGS += -D PARTICLE_SIMULATOR_THREAD_PARALLEL
endif # omp

randcnomp.o: rand.cxx rand.hpp 
	$(CXX) $(CXXFLAGS) -c $< -o $@

randfnomp.o: rand.f
	$(FC) $(FFLAGS) -c $< -o $@

librandnomp.a: randcnomp.o randfnomp.o
	ar rcs $@ $^

randc.o: rand.cxx rand.hpp 
	$(CXX) $(CXXFLAGS) $(OMPFLAGS) -c $< -o $@

randf.o: rand.f
	$(FC) $(FFLAGS) $(OMPFLAGS) -c $< -o $@

librand.a: randc.o randf.o
	ar rcs $@ $^

test_randf: test_rand.f librand.a
	$(FC) $(FFLAGS) $< -o $@ -L./ -lrand -lstdc++ 

test_randc: test_rand.cxx librand.a 
	$(CXX) $(CXXFLAGS) $(OMPFLAGS) $< -o $@ -L./ -lrand $(FCLIBS)

test_randcnomp: test_rand.cxx librandnomp.a 
	$(CXX) $(CXXFLAGS) $< -o $@ -L./ -lrandnomp $(FCLIBS)

clean:
	rm -f *.o *.so *.gch *.a
